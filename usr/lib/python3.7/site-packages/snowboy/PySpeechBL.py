import time

class TimeForLiteralStack():
    def __init__(self, timeV = 0.0):
        self.time = timeV
    
    def getTime(self):
        return self.time


class WordForLiteralStack():
    def __init__(self, word = ''):
        self.word = word
    
    def getWord(self):
        return self.word
    

class PySpeechBL:
    def __init__(self):
        # literalStack = [word(), delay(), word(), delay()]
        self.literalStack = []
        # sentenceList = ['Hello boy', 'Hello girl', ...]
        self.sentenceList = []
        # callbackUrls = { 'Hello boy': ['http://...', 'http://...', ...], '...': [], ...}
        self.callbackUrls = {}
        
        self.lastWordAdded = ''
        self.lastWordTimestamp = time.time()
    
    '''
    arrSentences = ['Hello boy', 'Hello girl', ...]
    '''
    def addSentenceList(self, arrSentences):
        for val in arrSentences:
            self.sentenceList.append(val.lower())
            self.callbackUrls[val] = []
    
    '''
    sentenceToCallbackUrlsMap = [{sentence: 'Hello boy', url: 'http://...'}, {...}, ...]
    '''
    def fillCallbackUrls(self, sentenceToCallbackUrlsMap):
        for el in sentenceToCallbackUrlsMap:
            if el['sentence'].lower() not in self.callbackUrls:
                self.sentenceList.append(el['sentence'].lower())
                self.callbackUrls[el['sentence'].lower()] = []
            self.callbackUrls[el['sentence'].lower()].append(el['url'])
    
    def addWordToStack(self, word):
        currentTime = time.time()
        timeDiff = currentTime - self.lastWordTimestamp
        
        # The time difference threshold
        if timeDiff > 7:
            self.literalStack = []
        elif timeDiff > 2:
            self.literalStack.append(TimeForLiteralStack(timeDiff))
    
        self.literalStack.append(WordForLiteralStack(word.lower()))
    
    def pollEvent(self):
        result = []
        
        stackString = ''
        stackStringList = []
        currentString = ''
        for val in self.literalStack:
            if type(val) is WordForLiteralStack:
                stackString = stackString + ' ' + val.getWord()
                stackString = stackString.strip()

                currentString = currentString + ' ' + val.getWord()
                currentString = currentString.strip()
            elif type(val) is TimeForLiteralStack:
                stackStringList.append(currentString)
                currentString = ''

        if currentString.strip() != '':
            stackStringList.append(currentString)
        
        if stackString.strip() != '':
            stackStringList.insert(0, stackString)

        print(stackStringList)

        for val in self.sentenceList:
            for string in stackStringList:
                if val == string:
                    result = self.callbackUrls[val]
                    break

        return result
    

if __name__ == '__main__':
    speechBL = PySpeechBL()
    speechBL.fillCallbackUrls([
        {
            'sentence': 'Hello boy',
            'url': 'http://google.co.in'
        },
        {
            'sentence': 'Hello girl',
            'url': 'http://soc.in'
        },
        {
            'sentence': 'Hello girl',
            'url': 'http://google.co.in/hd'
        }
    ])
    speechBL.addWordToStack('Hello')
    time.sleep(3)
    speechBL.addWordToStack('girl')
    time.sleep(1)

    ret = speechBL.pollEvent()
    print(ret)

    
'''
from http.server import HTTPServer, BaseHTTPRequestHandler
class SimpleHTTPRequestHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        print('Path', self.path)
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b'Hello, world!')
httpd = HTTPServer(('localhost', 8000), SimpleHTTPRequestHandler)
print('HTTP Server started')
httpd.serve_forever()
'''
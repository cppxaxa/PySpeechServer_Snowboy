import time
import snowboydecoder
import sys
import signal
import PySpeechBL

modelsDir = "models"

def signal_handler(signal, frame):
    global interrupted
    interrupted = True

def interrupt_callback():
    global interrupted
    return interrupted

<<<<<<< HEAD
class PySnowboyManager():
    def __init__(self, modelsDir):
        self.modelsDir = modelsDir
        self.modelPathList = []
        self.callbacks = []
        self.sensitivityList = []
        self.wordList = []
        self.detector = None
        self.logFile = 'PySnowboyManager.log'

        if os.path.isfile(self.logFile):
            os.remove(self.logFile)

        self.scanModels()

        self.logModelPathList()
        self.logSensitivityList()

    def logModelPathList(self):
        message = 'modelPathList [ '
        for val in self.modelPathList:
            message += val + ' '
        message += ']'
        self.logAction(message)
=======
class PySpeechServer:
    def __init__(self):
        # literalStack = [word(), delay(), word(), delay()]
        self.literalStack = []
        # sentenceList = ['Hello boy', 'Hello girl', ...]
        self.sentenceList = []
        # callbackUrls = { 'Hello boy': ['http://...', 'http://...', ...], '...': [], ...}
        self.callbackUrls = {}
        
        self.lastWordAdded = ''
        self.lastWordTimestamp = time.time()
    
    '''
    arrSentences = ['Hello boy', 'Hello girl', ...]
    '''
    def addSentenceList(self, arrSentences):
        for val in arrSentences:
            self.sentenceList.append(val.lower())
            self.callbackUrls[val] = []
    
    '''
    sentenceToCallbackUrlsMap = [{sentence: 'Hello boy', url: 'http://...'}, {...}, ...]
    '''
    def fillCallbackUrls(self, sentenceToCallbackUrlsMap):
        for el in sentenceToCallbackUrlsMap:
            if el['sentence'].lower() not in self.callbackUrls:
                self.sentenceList.append(el['sentence'].lower())
                self.callbackUrls[el['sentence'].lower()] = []
            self.callbackUrls[el['sentence'].lower()].append(el['url'])
>>>>>>> 3279ce4a7ee097dd1f10afe03f22dba36f01cc72
    
    def logSensitivityList(self):
        message = 'sensitivityList [ '
        for val in self.sensitivityList:
            message += str(val) + ' '
        message += ']'
        self.logAction(message)

    def logAction(self, msg):
        fileHandle = None
        if not os.path.isfile(self.logFile):
            fileHandle = open(self.logFile, mode='w')
        else:
            fileHandle = open(self.logFile, mode='a')
        
<<<<<<< HEAD
        message = "PySnowboyManager::Message: " + msg
        fileHandle.write(message + "\n")

        print(message)

    def scanModels(self):
        if os.path.exists(self.modelsDir):
            for filename in os.listdir(self.modelsDir):
                filenameOnly = os.path.splitext(filename)[0].strip().lower()
                word = os.path.splitext(filename)[0].strip().lower().replace('_', ' ')
                ext = os.path.splitext(filename)[1].strip().lower()
                if ext == '.umdl' or ext == '.pmdl':
                    print(filename)
                    self.modelPathList.append(os.path.join(self.modelsDir, filename))
                    self.wordList.append(word)
                    # Check if sensitivity file is missing, else load

                    sensitivityFilename = filenameOnly + '.txt'
                    sensitivityFilePath = os.path.join(self.modelsDir, sensitivityFilename)
                    if os.path.isfile(sensitivityFilePath):
                        try:
                            with open(sensitivityFilePath) as sensitivityFileHandle:
                                sensitivity = float(sensitivityFileHandle.readline().strip())
                                self.sensitivityList.append(sensitivity)
                        except:
                            self.logAction('Sensitivity file content should be a float ' + sensitivityFilePath)
                            self.sensitivityList.append(0.5)
                    else:
                        self.logAction('Sensitivity file missing ' + sensitivityFilePath)
                        self.sensitivityList.append(0.5)

        else:
            print("[ERROR]", "Models directory not found", self.modelsDir)
            return
    
    def generateCallbackExpression(self):
        # pyCode = "snowboyManager.callbacks = [lambda: snowboyCallback('kiwi'), lambda: snowboyCallback('Hi'), lambda: snowboyCallback('sno')]"
        pyCode = "snowboyManager.callbacks = ["
        isFirst = True
        for val in self.wordList:
            if isFirst:
                isFirst = False
            else:
                pyCode += ', '
            
            pyCode += "lambda: snowboyCallback('" + val + "')"
        pyCode += ']'
        
        return pyCode


# Global object declaration
speechBL = None
snowboyManager = None

# Utility/ Callbacks

def snowboyCallback(wordDetected):
    msg = 'Word detected: ' + wordDetected
    snowboyManager.logAction(msg)
    print(msg)

    speechBL.addWordToStack(wordDetected)
    urlList = speechBL.pollEvent()
    print(urlList)

=======
        # The time difference threshold
        if timeDiff > 7:
            self.literalStack = []
        elif timeDiff > 2:
            self.literalStack.append(TimeForLiteralStack(timeDiff))
    
        self.literalStack.append(WordForLiteralStack(word.lower()))
    
    def pollEvent(self):
        result = []
        
        stackString = ''
        stackStringList = []
        currentString = ''
        for val in self.literalStack:
            if type(val) is WordForLiteralStack:
                stackString = stackString + ' ' + val.getWord()
                stackString = stackString.strip()

                currentString = currentString + ' ' + val.getWord()
                currentString = currentString.strip()
            elif type(val) is TimeForLiteralStack:
                stackStringList.append(currentString)
                currentString = ''

        if currentString.strip() != '':
            stackStringList.append(currentString)
        
        if stackString.strip() != '':
            stackStringList.append(stackString)

        for val in self.sentenceList:
            for string in stackStringList:
                if val == string:
                    result = self.callbackUrls[val]
                    break

        return result
    
>>>>>>> 3279ce4a7ee097dd1f10afe03f22dba36f01cc72

if __name__ == '__main__':
    interrupted = False

    speechBL = PySpeechBL.PySpeechBL()
    speechBL.fillCallbackUrls([
        {
            'sentence': 'Alexa computer',
            'url': 'http://localhost:8000/alexa_computer'
        },
        {
            'sentence': 'Snowboy computer',
            'url': 'http://localhost:8000/snowboy_computer'
        },
        {
            'sentence': 'Hello girl',
            'url': 'http://google.co.in/hd'
        }
    ])
<<<<<<< HEAD
    # speechBL.addWordToStack('Hello')
    # time.sleep(3)
    # speechBL.addWordToStack('girl')
    # time.sleep(1)

    # ret = speechBL.pollEvent()
    # print(ret)


    snowboyManager = PySnowboyManager(modelsDir)
    callbackExpr = snowboyManager.generateCallbackExpression()
    exec(callbackExpr)

    signal.signal(signal.SIGINT, signal_handler)
    detector = snowboydecoder.HotwordDetector(snowboyManager.modelPathList, sensitivity=snowboyManager.sensitivityList)

    detector.start(detected_callback=snowboyManager.callbacks,
        interrupt_check=interrupt_callback,
        sleep_time=0.03)

    detector.terminate()

    
=======
    speechServer.addWordToStack('Hello')
    time.sleep(3)
    speechServer.addWordToStack('girl')
    time.sleep(1)
    
    ret = speechServer.pollEvent()
    print(ret)

    
'''
from http.server import HTTPServer, BaseHTTPRequestHandler

class SimpleHTTPRequestHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        print('Path', self.path)
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b'Hello, world!')

httpd = HTTPServer(('localhost', 8000), SimpleHTTPRequestHandler)
print('HTTP Server started')
httpd.serve_forever()
'''
>>>>>>> 3279ce4a7ee097dd1f10afe03f22dba36f01cc72

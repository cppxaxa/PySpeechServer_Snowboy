import os
import snowboydecoder
import sys
import signal

modelsDir = "models"

def signal_handler(signal, frame):
    global interrupted
    interrupted = True

def interrupt_callback():
    global interrupted
    return interrupted

class PySnowboyManager():
    def __init__(self, modelsDir):
        self.modelsDir = modelsDir
        self.modelPathList = []
        self.callbacks = []
        self.sensitivityList = []
        self.wordList = []
        self.detector = None
        self.logFile = 'PySnowboyManager.log'

        if os.path.isfile(self.logFile):
            os.remove(self.logFile)

        self.scanModels()

        self.logModelPathList()
        self.logSensitivityList()

    def logModelPathList(self):
        message = 'modelPathList [ '
        for val in self.modelPathList:
            message += val + ' '
        message += ']'
        self.logAction(message)
    
    def logSensitivityList(self):
        message = 'sensitivityList [ '
        for val in self.sensitivityList:
            message += str(val) + ' '
        message += ']'
        self.logAction(message)

    def logAction(self, msg):
        fileHandle = None
        if not os.path.isfile(self.logFile):
            fileHandle = open(self.logFile, mode='w')
        else:
            fileHandle = open(self.logFile, mode='a')
        
        message = "PySnowboyManager::Message: " + msg
        fileHandle.write(message + "\n")

        print(message)

    def scanModels(self):
        if os.path.exists(self.modelsDir):
            for filename in os.listdir(self.modelsDir):
                filenameOnly = os.path.splitext(filename)[0].strip().lower()
                word = os.path.splitext(filename)[0].strip().lower().replace('_', ' ')
                ext = os.path.splitext(filename)[1].strip().lower()
                if ext == '.umdl' or ext == '.pmdl':
                    print(filename)
                    self.modelPathList.append(os.path.join(self.modelsDir, filename))
                    self.wordList.append(word)
                    # Check if sensitivity file is missing, else load

                    sensitivityFilename = filenameOnly + '.txt'
                    sensitivityFilePath = os.path.join(self.modelsDir, sensitivityFilename)
                    if os.path.isfile(sensitivityFilePath):
                        try:
                            with open(sensitivityFilePath) as sensitivityFileHandle:
                                sensitivity = float(sensitivityFileHandle.readline().strip())
                                self.sensitivityList.append(sensitivity)
                        except:
                            self.logAction('Sensitivity file content should be a float ' + sensitivityFilePath)
                            self.sensitivityList.append(0.5)
                    else:
                        self.logAction('Sensitivity file missing ' + sensitivityFilePath)
                        self.sensitivityList.append(0.5)

        else:
            print("[ERROR]", "Models directory not found", self.modelsDir)
            return
    
    def generateCallbackExpression(self):
        # pyCode = "snowboyManager.callbacks = [lambda: snowboyCallback('kiwi'), lambda: snowboyCallback('Hi'), lambda: snowboyCallback('sno')]"
        pyCode = "snowboyManager.callbacks = ["
        isFirst = True
        for val in self.wordList:
            if isFirst:
                isFirst = False
            else:
                pyCode += ', '
            
            pyCode += "lambda: snowboyCallback('" + val + "')"
        pyCode += ']'
        
        return pyCode


# Global object declaration
snowboyManager = None

# Utility/ Callbacks

def snowboyCallback(wordDetected):
    msg = 'Word detected: ' + wordDetected
    snowboyManager.logAction(msg)
    print(msg)


if __name__ == '__main__':
    interrupted = False

    snowboyManager = PySnowboyManager(modelsDir)
    callbackExpr = snowboyManager.generateCallbackExpression()
    exec(callbackExpr)

    signal.signal(signal.SIGINT, signal_handler)
    detector = snowboydecoder.HotwordDetector(snowboyManager.modelPathList, sensitivity=snowboyManager.sensitivityList)

    detector.start(detected_callback=snowboyManager.callbacks,
        interrupt_check=interrupt_callback,
        sleep_time=0.03)

    detector.terminate()

    